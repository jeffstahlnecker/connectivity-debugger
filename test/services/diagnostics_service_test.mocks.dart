// Mocks generated by Mockito 5.4.5 from annotations
// in connectivity_debugger/test/services/diagnostics_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_debugger/services/diagnostics_service.dart' as _i7;
import 'package:connectivity_plus/connectivity_plus.dart' as _i4;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i6;
import 'package:device_info_plus/device_info_plus.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sim_data/sim_data.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSimData_0 extends _i1.SmartFake implements _i2.SimData {
  _FakeSimData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDeviceInfo_1 extends _i1.SmartFake
    implements _i3.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_2 extends _i1.SmartFake implements _i3.IosDeviceInfo {
  _FakeIosDeviceInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxDeviceInfo_3 extends _i1.SmartFake
    implements _i3.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebBrowserInfo_4 extends _i1.SmartFake
    implements _i3.WebBrowserInfo {
  _FakeWebBrowserInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsDeviceInfo_5 extends _i1.SmartFake
    implements _i3.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsDeviceInfo_6 extends _i1.SmartFake
    implements _i3.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseDeviceInfo_7 extends _i1.SmartFake
    implements _i3.BaseDeviceInfo {
  _FakeBaseDeviceInfo_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i4.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i6.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i5.Stream<_i6.ConnectivityResult>.empty(),
      ) as _i5.Stream<_i6.ConnectivityResult>);

  @override
  _i5.Future<_i6.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<_i6.ConnectivityResult>.value(
            _i6.ConnectivityResult.bluetooth),
      ) as _i5.Future<_i6.ConnectivityResult>);
}

/// A class which mocks [ISimDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockISimDataProvider extends _i1.Mock implements _i7.ISimDataProvider {
  MockISimDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.SimData> getSimData() => (super.noSuchMethod(
        Invocation.method(
          #getSimData,
          [],
        ),
        returnValue: _i5.Future<_i2.SimData>.value(_FakeSimData_0(
          this,
          Invocation.method(
            #getSimData,
            [],
          ),
        )),
      ) as _i5.Future<_i2.SimData>);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i3.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue:
            _i5.Future<_i3.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_1(
          this,
          Invocation.getter(#androidInfo),
        )),
      ) as _i5.Future<_i3.AndroidDeviceInfo>);

  @override
  _i5.Future<_i3.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue: _i5.Future<_i3.IosDeviceInfo>.value(_FakeIosDeviceInfo_2(
          this,
          Invocation.getter(#iosInfo),
        )),
      ) as _i5.Future<_i3.IosDeviceInfo>);

  @override
  _i5.Future<_i3.LinuxDeviceInfo> get linuxInfo => (super.noSuchMethod(
        Invocation.getter(#linuxInfo),
        returnValue:
            _i5.Future<_i3.LinuxDeviceInfo>.value(_FakeLinuxDeviceInfo_3(
          this,
          Invocation.getter(#linuxInfo),
        )),
      ) as _i5.Future<_i3.LinuxDeviceInfo>);

  @override
  _i5.Future<_i3.WebBrowserInfo> get webBrowserInfo => (super.noSuchMethod(
        Invocation.getter(#webBrowserInfo),
        returnValue: _i5.Future<_i3.WebBrowserInfo>.value(_FakeWebBrowserInfo_4(
          this,
          Invocation.getter(#webBrowserInfo),
        )),
      ) as _i5.Future<_i3.WebBrowserInfo>);

  @override
  _i5.Future<_i3.MacOsDeviceInfo> get macOsInfo => (super.noSuchMethod(
        Invocation.getter(#macOsInfo),
        returnValue:
            _i5.Future<_i3.MacOsDeviceInfo>.value(_FakeMacOsDeviceInfo_5(
          this,
          Invocation.getter(#macOsInfo),
        )),
      ) as _i5.Future<_i3.MacOsDeviceInfo>);

  @override
  _i5.Future<_i3.WindowsDeviceInfo> get windowsInfo => (super.noSuchMethod(
        Invocation.getter(#windowsInfo),
        returnValue:
            _i5.Future<_i3.WindowsDeviceInfo>.value(_FakeWindowsDeviceInfo_6(
          this,
          Invocation.getter(#windowsInfo),
        )),
      ) as _i5.Future<_i3.WindowsDeviceInfo>);

  @override
  _i5.Future<_i3.BaseDeviceInfo> get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue: _i5.Future<_i3.BaseDeviceInfo>.value(_FakeBaseDeviceInfo_7(
          this,
          Invocation.getter(#deviceInfo),
        )),
      ) as _i5.Future<_i3.BaseDeviceInfo>);
}
