import 'package:flutter_test/flutter_test.dart';
import 'package:connectivity_debugger/services/log_storage_service.dart';
import 'package:connectivity_debugger/models/log_entry.dart';
import 'package:connectivity_debugger/models/device_status.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'dart:io';

void main() {
  late LogStorageService logStorageService;
  late Directory tempDir;

  setUpAll(() async {
    TestWidgetsFlutterBinding.ensureInitialized();
    tempDir = await Directory.systemTemp.createTemp();
    Hive.init(tempDir.path);
  });

  setUp(() async {
    logStorageService = LogStorageService();
    await logStorageService.init();
  });

  tearDown(() async {
    await Hive.close();
  });

  tearDownAll(() async {
    await tempDir.delete(recursive: true);
  });

  group('LogStorageService', () {
    final timestamp = DateTime(2025, 5, 30, 0, 16, 39, 627148);
    final deviceStatus = DeviceStatus(iccid: '123', timestamp: timestamp);

    test('saves and retrieves log', () async {
      final logEntry = LogEntry(
        id: 'test-id',
        deviceStatus: deviceStatus,
        testResults: {'airplaneMode': true, 'simInserted': false},
        summary: 'Test summary',
        timestamp: timestamp,
      );

      await logStorageService.saveLog(logEntry);
      final logs = await logStorageService.getAllLogs();

      expect(logs.length, 1);
      expect(logs.first.id, isNotEmpty); // ID is generated by saveLog
      expect(logs.first.deviceStatus.iccid, logEntry.deviceStatus.iccid);
      expect(logs.first.testResults, logEntry.testResults);
      expect(logs.first.summary, logEntry.summary);
      expect(logs.first.timestamp, logEntry.timestamp);
    });

    test('clears all logs', () async {
      final logEntry = LogEntry(
        id: 'test-id',
        deviceStatus: deviceStatus,
        testResults: {},
        summary: '',
        timestamp: timestamp,
      );

      await logStorageService.saveLog(logEntry);
      await logStorageService.clearAllLogs();
      final logs = await logStorageService.getAllLogs();

      expect(logs, isEmpty);
    });

    test('deletes specific log', () async {
      final logEntry1 = LogEntry(
        id: 'test-id-1',
        deviceStatus: deviceStatus,
        testResults: {},
        summary: '',
        timestamp: timestamp,
      );
      final logEntry2 = LogEntry(
        id: 'test-id-2',
        deviceStatus: deviceStatus,
        testResults: {},
        summary: '',
        timestamp: timestamp,
      );

      await logStorageService.saveLog(logEntry1);
      await logStorageService.saveLog(logEntry2);
      await logStorageService.deleteLog(logEntry1.id);
      final logs = await logStorageService.getAllLogs();

      expect(logs.length, 1);
      expect(logs.first.id, logEntry2.id);
    });

    test('exports logs as JSON', () async {
      final logEntry = LogEntry(
        id: 'test-id',
        deviceStatus: deviceStatus,
        testResults: {'airplaneMode': true, 'simInserted': false},
        summary: 'Test summary',
        timestamp: timestamp,
      );

      await logStorageService.saveLog(logEntry);
      final json = await logStorageService.exportLogsAsJson();

      expect(json, isNotEmpty);
      expect(json, contains('test-id'));
      expect(json, contains('Test summary'));
    });

    test('exports logs as text', () async {
      final logEntry = LogEntry(
        id: 'test-id',
        deviceStatus: deviceStatus,
        testResults: {'airplaneMode': true, 'simInserted': false},
        summary: 'Test summary',
        timestamp: timestamp,
      );

      await logStorageService.saveLog(logEntry);
      final text = await logStorageService.exportLogsAsText();

      expect(text, isNotEmpty);
      expect(text, contains('Log Entry:'));
      expect(text, contains('Test summary'));
      expect(text, contains('ICCID: 123'));
      expect(text, contains('airplaneMode: true'));
    });
  });
}
